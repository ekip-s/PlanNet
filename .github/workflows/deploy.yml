name: Deploy to Production

on:
  push:
    branches: [master]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  first-setup:
    name: Initial Server Setup
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: SSH and run certbot tasks
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            export DEBIAN_FRONTEND=noninteractive
            
            #docker setup
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce

            #nginx
            sudo apt-get update
            sudo apt-get install -y nginx certbot

            # Настройка nginx для certbot challenges
            sudo mkdir -p /var/www/certbot/.well-known/acme-challenge
            sudo chown -R www-data:www-data /var/www/certbot
            sudo chmod -R 755 /var/www/certbot
            
            sudo tee /etc/nginx/sites-available/certbot <<EOF
            server {
                listen 80;
                listen [::]:80;
                server_name ${{ secrets.CERTBOT_DOMAINS }};
                location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
                }
                location / {
                  return 301 https://${{ secrets.MAIN_DOMAIN }}\$request_uri;
                }
            }
            EOF

            sudo ln -sf /etc/nginx/sites-available/certbot /etc/nginx/sites-enabled/certbot
            sudo rm /etc/nginx/sites-enabled/default
            sudo nginx -t
            sudo systemctl restart nginx

            # Получение сертификатов
            DOMAIN_ARGS=""
            for d in ${{ secrets.CERTBOT_DOMAINS }}; do
              DOMAIN_ARGS+=" -d $d"
            done

            sudo certbot certonly --webroot -w /var/www/certbot \
              --email "${{ secrets.CERTBOT_EMAIL }}" \
              --agree-tos \
              --no-eff-email \
              --non-interactive \
              $DOMAIN_ARGS

            # Очистка
            sudo systemctl stop nginx
            sudo apt-get remove -y nginx
            sudo apt-get autoremove -y

            #git
            sudo apt update
            sudo apt install -y git
            git clone https://github.com/ekip-s/PlanNet.git
            
            
  certbot-renew:
    name: Issue or Renew Certificates
    runs-on: ubuntu-latest
    steps:
      - name: SSH and run certbot tasks
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd PlanNet

            # Update code base before certbot tasks
            git reset --hard HEAD
            git pull origin master

            # 1. Start only nginx to serve HTTP challenges
            docker compose -f docker-compose.prod.yml up -d nginx

            # 2. Ensure certbot data volume exists
            docker volume create cert_data || true

            # 3. Prepare domain args
            for d in ${{ secrets.CERTBOT_DOMAINS }}; do
              DOMAIN_ARGS+=" -d $d"
            done

            # 4. Issue or renew certificates
            docker compose -f docker-compose.prod.yml run --rm certbot certonly \
              --webroot --webroot-path=/var/www/certbot \
              --agree-tos --no-eff-email \
              --email "${{ secrets.CERTBOT_EMAIL }}" \
              $DOMAIN_ARGS || true

            # 5. Reload nginx to pick up new certificates
            docker compose -f docker-compose.prod.yml kill -s SIGHUP nginx || true

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: certbot-renew
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: SSH and deploy app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd PlanNet

            # Full restart of app services (code already updated in certbot-renew)
            docker compose -f docker-compose.prod.yml down --remove-orphans
            docker compose -f docker-compose.prod.yml up -d --build
